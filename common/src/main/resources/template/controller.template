package $!{controllerPackage};

import $!{entityPackage}.$!{domainName}Entity;
import $!{servicePackage}.$!{domainName}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;

import com.rm.common.jooq.Paging;
import com.rm.common.web.response.Page;
import java.util.Map;
import java.util.List;

@RestController
@RequestMapping("$!{mapping}")
public class $!{domainName}Controller {

    @Autowired
    $!{domainName}Service $!{attrName}Service;


    /**
     * 单表保存，会自动生成id，保存时间，建表时设置当前时间
     *
     * @param entity
     */
    @RequestMapping("save")
    public String save($!{domainName}Entity entity) {
        return $!{attrName}Service.insert(entity);
    }

    /**
     * 根据id 删除数据
     *
     * @param id
     */
    @RequestMapping("delete")
    public void deleteById(String id) {
        $!{attrName}Service.deleteById(id);
    }

    /**
     * 根据id修改数据
     *
     * @param entity
     */
    @RequestMapping("update")
    public void update($!{domainName}Entity entity) {
        $!{attrName}Service.update(entity);
    }

    /**
     * 根据id 获取数据
     *
     * @param id
     * @return
     */
    @RequestMapping("get-by-id")
    public $!{domainName}Entity getById(String id) {
        return $!{attrName}Service.getById(id);
    }

    /**
     * 查询所有数据
     *
     * @return
     */
    @RequestMapping("list")
    public List<$!{domainName}Entity> list() {
        return $!{attrName}Service.getAll();
    }

    /**
     * 分页条件查询
     * <p>  支持的 查询条件说明
     * EQ("eq", " = "),
     * NOT_EQ("ne", " != "),
     * GE("ge", " >= "),
     * LE("le", " <= "),
     * GT("gt", " > "),
     * LT("lt", " < "),
     * LIKE("like", " LIKE "),
     *
     * @param map  key为表字段，默认以等于条件查询 where key=value，
     *             其他简单条件查询使用 字段名-条件（）  会在where后面是有字段当条件查询
     *             例如： key: a-like value: nihao   sql：where `a` like 'nihao'
                   排序： order- 开头加字段名排序  1 升序 0 降序   多个排序英文逗号隔开
                        key：order-a,b value: 1,0  sql   order by a asc
     * @param page
     * @return
     */
    @RequestMapping("list-condition-page")
    public Paging<$!{domainName}Entity> listConditionPage(@RequestBody Map map, Page page) {
        Paging<$!{domainName}Entity> paging = new Paging<>(page.getPage(), page.getSize());
        $!{attrName}Service.listConditionPage(map, paging);
        return paging;
    }

}
