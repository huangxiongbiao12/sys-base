/*
 * This file is generated by jOOQ.
 */
package com.rm.manager.jooq.tables;


import com.rm.manager.jooq.Keys;
import com.rm.manager.jooq.SysBase;
import com.rm.manager.jooq.tables.records.SysLoginLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysLoginLog extends TableImpl<SysLoginLogRecord> {

    private static final long serialVersionUID = -1432601508;

    /**
     * The reference instance of <code>sys_base.sys_login_log</code>
     */
    public static final SysLoginLog SYS_LOGIN_LOG = new SysLoginLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysLoginLogRecord> getRecordType() {
        return SysLoginLogRecord.class;
    }

    /**
     * The column <code>sys_base.sys_login_log.id</code>.
     */
    public final TableField<SysLoginLogRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys_base.sys_login_log.create_date</code>.
     */
    public final TableField<SysLoginLogRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sys_base.sys_login_log.update_date</code>.
     */
    public final TableField<SysLoginLogRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sys_base.sys_login_log.user_id</code>.
     */
    public final TableField<SysLoginLogRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys_base.sys_login_log.phone</code>.
     */
    public final TableField<SysLoginLogRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys_base.sys_login_log.sys_info</code>.
     */
    public final TableField<SysLoginLogRecord, String> SYS_INFO = createField(DSL.name("sys_info"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys_base.sys_login_log.device_info</code>.
     */
    public final TableField<SysLoginLogRecord, String> DEVICE_INFO = createField(DSL.name("device_info"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>sys_base.sys_login_log</code> table reference
     */
    public SysLoginLog() {
        this(DSL.name("sys_login_log"), null);
    }

    /**
     * Create an aliased <code>sys_base.sys_login_log</code> table reference
     */
    public SysLoginLog(String alias) {
        this(DSL.name(alias), SYS_LOGIN_LOG);
    }

    /**
     * Create an aliased <code>sys_base.sys_login_log</code> table reference
     */
    public SysLoginLog(Name alias) {
        this(alias, SYS_LOGIN_LOG);
    }

    private SysLoginLog(Name alias, Table<SysLoginLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysLoginLog(Name alias, Table<SysLoginLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SysLoginLog(Table<O> child, ForeignKey<O, SysLoginLogRecord> key) {
        super(child, key, SYS_LOGIN_LOG);
    }

    @Override
    public Schema getSchema() {
        return SysBase.SYS_BASE;
    }

    @Override
    public UniqueKey<SysLoginLogRecord> getPrimaryKey() {
        return Keys.SYNTHETIC_PK_SYS_LOGIN_LOG;
    }

    @Override
    public List<UniqueKey<SysLoginLogRecord>> getKeys() {
        return Arrays.<UniqueKey<SysLoginLogRecord>>asList(Keys.PK_SYS_LOGIN_LOG, Keys.SYNTHETIC_PK_SYS_LOGIN_LOG);
    }

    @Override
    public SysLoginLog as(String alias) {
        return new SysLoginLog(DSL.name(alias), this);
    }

    @Override
    public SysLoginLog as(Name alias) {
        return new SysLoginLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysLoginLog rename(String name) {
        return new SysLoginLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysLoginLog rename(Name name) {
        return new SysLoginLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, LocalDateTime, LocalDateTime, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
