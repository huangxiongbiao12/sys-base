/*
 * This file is generated by jOOQ.
 */
package com.rm.manager.jooq.tables;


import com.rm.manager.jooq.Keys;
import com.rm.manager.jooq.SysBase;
import com.rm.manager.jooq.tables.records.SysDictionaryTypeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysDictionaryType extends TableImpl<SysDictionaryTypeRecord> {

    private static final long serialVersionUID = 978165092;

    /**
     * The reference instance of <code>sys_base.sys_dictionary_type</code>
     */
    public static final SysDictionaryType SYS_DICTIONARY_TYPE = new SysDictionaryType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysDictionaryTypeRecord> getRecordType() {
        return SysDictionaryTypeRecord.class;
    }

    /**
     * The column <code>sys_base.sys_dictionary_type.id</code>.
     */
    public final TableField<SysDictionaryTypeRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys_base.sys_dictionary_type.create_date</code>.
     */
    public final TableField<SysDictionaryTypeRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sys_base.sys_dictionary_type.update_date</code>.
     */
    public final TableField<SysDictionaryTypeRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sys_base.sys_dictionary_type.remark</code>.
     */
    public final TableField<SysDictionaryTypeRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys_base.sys_dictionary_type.type</code>.
     */
    public final TableField<SysDictionaryTypeRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>sys_base.sys_dictionary_type</code> table reference
     */
    public SysDictionaryType() {
        this(DSL.name("sys_dictionary_type"), null);
    }

    /**
     * Create an aliased <code>sys_base.sys_dictionary_type</code> table reference
     */
    public SysDictionaryType(String alias) {
        this(DSL.name(alias), SYS_DICTIONARY_TYPE);
    }

    /**
     * Create an aliased <code>sys_base.sys_dictionary_type</code> table reference
     */
    public SysDictionaryType(Name alias) {
        this(alias, SYS_DICTIONARY_TYPE);
    }

    private SysDictionaryType(Name alias, Table<SysDictionaryTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysDictionaryType(Name alias, Table<SysDictionaryTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SysDictionaryType(Table<O> child, ForeignKey<O, SysDictionaryTypeRecord> key) {
        super(child, key, SYS_DICTIONARY_TYPE);
    }

    @Override
    public Schema getSchema() {
        return SysBase.SYS_BASE;
    }

    @Override
    public UniqueKey<SysDictionaryTypeRecord> getPrimaryKey() {
        return Keys.SYNTHETIC_PK_SYS_DICTIONARY_TYPE;
    }

    @Override
    public List<UniqueKey<SysDictionaryTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<SysDictionaryTypeRecord>>asList(Keys.PK_SYS_DICTIONARY_TYPE, Keys.SYNTHETIC_PK_SYS_DICTIONARY_TYPE);
    }

    @Override
    public SysDictionaryType as(String alias) {
        return new SysDictionaryType(DSL.name(alias), this);
    }

    @Override
    public SysDictionaryType as(Name alias) {
        return new SysDictionaryType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysDictionaryType rename(String name) {
        return new SysDictionaryType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysDictionaryType rename(Name name) {
        return new SysDictionaryType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
